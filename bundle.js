(()=>{"use strict";class e{constructor(e){this.elm=e}}const t=new Map([["info","rgb(0, 255, 0)"],["error","red"],["warn","yellow"],["debug","rgb(133, 0, 133)"]]);var n;!function(e){e.ElmExistID=function(e){return null!==document.getElementById(e)},e.print=function(e,n){const i=new Date;console[e]("%c[%c"+i.toLocaleDateString()+"%c] [%c"+i.toLocaleTimeString()+"%c] - %c"+e.toUpperCase()+"%c - %c"+n,"color: gray;","color: green;","color: gray;","color: green;","color: gray;",`color: ${t.get(e)}`,"color: gray;","color: white")},e.getBrowser=function(){const e=void 0!==window.InstallTrigger,t=!(!window.chrome||!window.chrome.webstore&&!window.chrome.runtime);return!document.documentMode&&window.StyleMedia,t&&navigator.userAgent.includes("Edg"),t?{name:"chrome",fake:!navigator.userAgent.includes("Chrome/")}:e?{name:"firefox",fake:!navigator.userAgent.includes("Firefox/")}:void 0}}(n||(n={}));class i extends e{constructor(e,t){super(e),this.body_class="et_body",this.body_loaded=!1,this.interface=t}Init(){return n.print("info","Loading Body..."),this.body_loaded=this.interface.Init(),document.body.append(this.interface.elm),n.print("info","Loaded Body!"),this.body_loaded}}class o extends e{constructor(e){super(e),this.title_text="Night The Fox's Page",this.title_loaded=!1,this.title_id="et_title",this.css_file="style.css",this.css_loaded=!1,this.css_id="et_stylesheet",this.head_loaded=!1,this.head_class="et_head"}Init(){return n.print("info","Loading Head..."),this.head_loaded=this.loadTitle()&&this.hasCSSLoaded(),n.print("info","Loaded Head!"),this.head_loaded}hasCSSLoaded(){return n.ElmExistID("et_stylesheet")&&(this.css_loaded=!0),this.css_loaded}loadTitle(){n.print("info","Loading Head Title...");const e=document.createElement("title");return e.innerHTML=this.title_text,e.id=this.title_id,e.className=this.head_class,document.head.append(e),this.title_loaded=!0,n.print("info","Loaded Head Title!"),this.title_loaded}}class s extends e{constructor(e,t,n){super(null),this.content=t,this.navbar=e,this.footer=n}Init(){this.elm=document.createElement("div");const e=this.content.Init(),t=this.navbar.Init(),n=this.footer.Init();return this.elm.append(t.elm,e.elm,n.elm),!0}}class r extends e{constructor(){super(null),this.wip_text="This Page is currently Work In Progress (WIP)",this.wipSet=!1,this.contentHTML='\n    <h1 id="title_about">About</h1>\n    <p>Hi, I am N1ghtTheF0x, but you can just call me Night. I\'m a Hobby Developer and also a gamer. I also like to understand, how each game ticks, even if it is against their TOS (I respect them as well).</p>\n    '+function(){const e=new Map([["<a href='https://github.com/N1ghtTheF0x/Eclipse-Engine'>Eclipse Engine</a>","A self made Game Engine using the power of Typescript and HTML5 canvas. Very unstable though."]]);return`\n    <h1 id="title_projects">Projects</h1>\n    ${t="<table>",e.forEach((function(e,n){t+=`<tr><th><h1>${n}</h1></th><th>${e}</th></tr>`})),t+"</table>"}\n    `;var t}()}Init(){return this.elm=document.createElement("div"),this.elm.innerHTML=this.contentHTML,this}SetWIP(){const e=document.createElement("p");e.innerHTML=this.wip_text,this.elm=e}}class a extends e{constructor(){super(null),this.text="<small>&copy; Copyright "+(new Date).getFullYear()+"</small>"}Init(){return this.elm=document.createElement("footer"),this.elm.innerHTML=this.text,this}}class c extends e{constructor(){super(null),this.title="N1ghtTheF0x's Page",this.links=new Map([["About","#title_about"],["Projects","#title_projects"]])}Init(){this.elm=document.createElement("nav");const e=document.createElement("h1");e.innerHTML=this.title,e.id="et_nav_title",this.elm.append(e);const t=document.createElement("table");t.id="et_nav_table";const n=document.createElement("tr");for(const[e,t]of this.links.entries()){const i=document.createElement("th"),o=document.createElement("a");o.innerHTML=" "+e+" ",o.href=t,o.className="et_navbar_link",o.id="et_navbar_link_"+e,i.append(o),n.append(i)}return t.append(n),this.elm.append(t),this}}class l{constructor(e,t){this.head=e,this.body=t}Init(){n.print("info","Loading Website..."),this.head.Init(),this.body.Init(),n.print("info","Loaded Website!"),this.body.interface.content.SetWIP()}}document.body.onload=function(){const e=performance.now();n.print("info","Constructing the whole Website...");const t=new o(document.head),d=new i(document.body,new s(new c,new r,new a));new l(t,d).Init(),document.body.onload=null;const h=performance.now();n.print("info","Constructed the whole Website! Took "+(h-e)+"ms!")}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,